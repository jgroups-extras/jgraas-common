syntax="proto3";

package org.jgroups.jgraas.common;



option java_multiple_files = true;

message ProtoRequest {
    oneof choice {
        ProtoMessage      message        = 1; // client <-> server
        ProtoMessageBatch message_batch  = 2; // server -> client
        ProtoJoinRequest  join_req       = 3; // client -> server
        ProtoJoinResponse join_rsp       = 4; // server -> client
        ProtoLeaveRequest leave_req      = 5; // client -> server
        ProtoView         view           = 6; // server -> client
        ProtoHeartbeat    heartbeat      = 7; // client -> server
        ProtoException    exception      = 8; // server -> client (blocking calls)
    }
}

message ProtoMessage {
    string               cluster_name  = 1;
    ProtoAddress         destination   = 2; // null: send to all
    ProtoAddress         sender        = 3;
    int32                flags         = 4;
    bytes                payload       = 5;
    ProtoMetadata        meta_data     = 6; // metadata (may be null)
    repeated ProtoHeader headers       = 7;
}

message ProtoMessageBatch {
    string       cluster_name    = 1;
    ProtoAddress destination     = 2;
    ProtoAddress sender          = 3;
    repeated ProtoMessage msgs   = 4;
    bool         multicast       = 5;
    Mode         mode            = 6;
    int64        timestamp       = 7;
}

enum Mode {
    OOB   = 0;
    REG   = 1;
    MIXED = 2;
}



message ProtoHeartbeat {

}

message ProtoException {
    string classname     = 1;
    string message       = 2;
    string stacktrace    = 3;
}

message ProtoJoinRequest {
    string  cluster_name = 1;
    string  name         = 2;
}

message ProtoJoinResponse {
    string         cluster       = 1;
    ProtoAddress   local_address = 2;
    string         name          = 3;
    ProtoException ex            = 4;
}

/** Used for graceful leaves. Ungraceful leaves (e.g. crashes) are detected by the server directly  */
message ProtoLeaveRequest {
}

message ProtoAddress {
    string name = 1; // logical name
    oneof actual_address {
        ProtoUUID     uuid      = 2;
        ProtoSiteUUID site_uuid = 3;
    }
}

message ProtoUUID {
    int64 most_sig   = 1; // most significant bits
    int64 least_sig  = 2; // least significant bits
}

message ProtoSiteUUID {
    ProtoUUID   uuid           = 1;
    string      site_name      = 2;
    bool        is_site_master = 3; // -> SiteMaster if true
}

message ProtoView {
    ProtoViewId           view_id = 1;
    repeated ProtoAddress member  = 2;
}

message ProtoViewId {
    int64 id        = 1;
    ProtoAddress creator = 2;
}

message ProtoMetadata {
    int32 msg_type  = 1;
    int32 version   = 2;
}

message ProtoHeader {
    int32 protocol_id = 1;
    oneof one_of {
        ProtoRpcHeader     rpc_hdr  = 2;
        ProtoForkHeader    fork_hdr = 3;
    }
}

/** Header used for RPCs (RpcDispatcher / MessageDispatcher) */
message ProtoRpcHeader {
    int32                 type           = 1; // 0=request, 1=response, 2=exception
    int64                 request_id     = 2;
    int32                 corr_id        = 3;
    repeated ProtoAddress exclusion_list = 4;
}


message ProtoForkHeader {
    string fork_stack_id   = 1;
    string fork_channel_id = 2;
}





